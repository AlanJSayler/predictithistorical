#!/usr/bin/python3.6

import sqlite3
import urllib3
import json, re
import datetime

http = urllib3.PoolManager()
markets = [
    3633,
    3653,
    3698
 ]

url = "https://www.predictit.org/api/marketdata/markets/"

conn = sqlite3.connect('PredictItData.db')

c = conn.cursor()

c.execute('''
            CREATE TABLE IF NOT EXISTS market
            (
                market_id INTEGER PRIMARY KEY,
                name TEXT
            )
            ''')

c.execute('''           
            CREATE TABLE IF NOT EXISTS contract
            (
                contract_id INTEGER PRIMARY KEY,
                market_id INTEGER,
                name TEXT,
                FOREIGN KEY (market_id) REFERENCES market(market_id) 
            )
            ''')

c.execute('''            
            CREATE TABLE IF NOT EXISTS snapshot
            (
                snapshot_id INTEGER PRIMARY KEY AUTOINCREMENT,
                contract_id INTEGER,
                time timestamp,
                price REAL,
                FOREIGN KEY (contract_id) REFERENCES contract(contract_id)
            )  
            ''')

for market in markets:
#    print(market)
    response = (http.request('GET', "{}{}".format(url, market)))
    response = response.data.decode("utf8")
    response = json.loads(response)

    #TODO: these could be dynamically generated by a function
    c.execute('''
                INSERT INTO market(market_id, name)
                SELECT ?, ?
                WHERE NOT EXISTS(SELECT 1 FROM market WHERE market_id = ?)
                ''', (market, response['name'], market))

    for contract in response['contracts']:
        c.execute('''
                INSERT INTO contract(contract_id, market_id, name)
                SELECT ?, ?, ?
                WHERE NOT EXISTS(SELECT 1 FROM contract WHERE contract_id = ?)
                ''', (contract['id'], market, contract['name'], contract['id']))

        c.execute('''
                    INSERT INTO snapshot(contract_id, time, price)
                    VALUES(?, ?, ?) 
                ''', (contract['id'], contract['lastClosePrice'], datetime.datetime.now()))

conn.commit()

